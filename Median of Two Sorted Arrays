# LeetCode 4. Median of Two Sorted Arrays
# Time: O(log(min(m,n)))  Space: O(1)
# Usage: import function or run as script with example at bottom.

def findMedianSortedArrays(nums1, nums2):
    # ensure nums1 is the smaller array
    if len(nums1) > len(nums2):
        nums1, nums2 = nums2, nums1
    m, n = len(nums1), len(nums2)
    if m == 0:
        mid = n // 2
        if n % 2 == 1:
            return float(nums2[mid])
        return (nums2[mid - 1] + nums2[mid]) / 2.0

    imin, imax, half = 0, m, (m + n + 1) // 2
    while imin <= imax:
        i = (imin + imax) // 2
        j = half - i
        if i < m and nums2[j - 1] > nums1[i]:
            imin = i + 1
        elif i > 0 and nums1[i - 1] > nums2[j]:
            imax = i - 1
        else:
            if i == 0:
                left_max = nums2[j - 1]
            elif j == 0:
                left_max = nums1[i - 1]
            else:
                left_max = max(nums1[i - 1], nums2[j - 1])

            if (m + n) % 2 == 1:
                return float(left_max)

            if i == m:
                right_min = nums2[j]
            elif j == n:
                right_min = nums1[i]
            else:
                right_min = min(nums1[i], nums2[j])

            return (left_max + right_min) / 2.0

# quick test
if __name__ == "__main__":
    print(findMedianSortedArrays([1,3], [2]))        # 2.0
    print(findMedianSortedArrays([1,2], [3,4]))      # 2.5
